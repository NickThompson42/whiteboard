{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c3e07075",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import json\n",
    "import pandas as pd\n",
    "import logging\n",
    "from datetime import *\n",
    "from typing import List, Dict, Any\n",
    "from urllib.parse import quote\n",
    "from shapely.geometry import Point, Polygon\n",
    "from shapely.geometry.base import BaseGeometry\n",
    "from sqlalchemy import create_engine\n",
    "import geopandas as gpd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38c2bf68",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "api_url_base = \"https://api.datalastic.com/api/v0/vessel_inradius?api-key=fe31eaee-696b-4169-9bf6-d09c46d40610\"\n",
    "api_lat = \"&lat=37.02977905\"\n",
    "api_lon = \"&lon=-76.08419314\"\n",
    "api_rad = \"&radius=50\"\n",
    "#50NM Max\n",
    "call = api_url_base + api_lat + api_lon + api_rad\n",
    "print(call)\n",
    "response = requests.get(call)\n",
    "js = response.json()\n",
    "indoc = pd.json_normalize(js[\"data\"][\"vessels\"])\n",
    "indoc = indoc[[\"country_iso\", \"mmsi\", \"lat\", \"lon\", \"course\", \"speed\", \"last_position_UTC\"]].copy()\n",
    "indoc = indoc.drop_duplicates().reset_index(drop = True)\n",
    "#cots_milstd2525b\n",
    "badcompany = [\"CN\", \"HK\", \"MO\", \"RU\"]\n",
    "goodcompany = [\"US\", \"GB\", \"UM\", \"VI\", \"PR\", \"MP\", \"NZ\", \"GU\", \"CA\", \"AU\", \"JP\"]\n",
    "catcodes = []\n",
    "cat_desc = []\n",
    "for c in list(indoc[\"country_iso\"]):\n",
    "    if c in badcompany:\n",
    "        catcodes.append(\"a-h-S\")\n",
    "        cat_desc.append(\"hostile vessel\")\n",
    "    elif c in goodcompany:\n",
    "        catcodes.append(\"a-f-S\")\n",
    "        cat_desc.append(\"friendly vessel\")\n",
    "    else:\n",
    "        catcodes.append(\"a-u-S\")\n",
    "        cat_desc.append(\"unknown vessel\")\n",
    "indoc[\"catcodes\"] = catcodes\n",
    "indoc[\"cat_desc\"] = cat_desc\n",
    "response.close()\n",
    "indoc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3e7c3dba",
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas as gpd\n",
    "indoc['geometry'] = indoc.apply(lambda row: Point(row.long, row.lat), axis=1)\n",
    "indoc['dtg'] = pd.to_datetime(indoc['dtg'])\n",
    "gdf = gpd.GeoDataFrame(indoc)\n",
    "gdf = gdf.set_crs('epsg:4326')\n",
    "now = str(datetime.now()).replace(\" \",\"T\").replace(\":\",\"_\")[:19]+\"Z\"\n",
    "gdf.to_file(\"ais_queries/\"+now+\"AIS_PULL.shp\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "71512918",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mmsi</th>\n",
       "      <th>long</th>\n",
       "      <th>lat</th>\n",
       "      <th>speed</th>\n",
       "      <th>course</th>\n",
       "      <th>dtg</th>\n",
       "      <th>catcodes</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>367371890</td>\n",
       "      <td>-75.889685</td>\n",
       "      <td>36.970760</td>\n",
       "      <td>9.8</td>\n",
       "      <td>91.4</td>\n",
       "      <td>2022-08-23 10:37:11-04:00</td>\n",
       "      <td>a-h-S</td>\n",
       "      <td>POINT (-75.88969 36.97076)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>367772272</td>\n",
       "      <td>-76.046782</td>\n",
       "      <td>36.980807</td>\n",
       "      <td>0.9</td>\n",
       "      <td>124.5</td>\n",
       "      <td>2022-08-23 10:37:11-04:00</td>\n",
       "      <td>a-h-S</td>\n",
       "      <td>POINT (-76.04678 36.98081)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>367007160</td>\n",
       "      <td>-76.156570</td>\n",
       "      <td>36.962037</td>\n",
       "      <td>3.5</td>\n",
       "      <td>250.1</td>\n",
       "      <td>2022-08-23 10:37:11-04:00</td>\n",
       "      <td>a-h-S</td>\n",
       "      <td>POINT (-76.15657 36.96204)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>367525000</td>\n",
       "      <td>-76.085750</td>\n",
       "      <td>36.968973</td>\n",
       "      <td>1.5</td>\n",
       "      <td>175.3</td>\n",
       "      <td>2022-08-23 10:37:11-04:00</td>\n",
       "      <td>a-h-S</td>\n",
       "      <td>POINT (-76.08575 36.96897)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>368180820</td>\n",
       "      <td>-76.116905</td>\n",
       "      <td>36.964137</td>\n",
       "      <td>0</td>\n",
       "      <td>240.8</td>\n",
       "      <td>2022-08-23 10:42:13-04:00</td>\n",
       "      <td>a-h-S</td>\n",
       "      <td>POINT (-76.11691 36.96414)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>367606000</td>\n",
       "      <td>-76.172120</td>\n",
       "      <td>36.990372</td>\n",
       "      <td>12.8</td>\n",
       "      <td>105.6</td>\n",
       "      <td>2022-08-23 11:42:35-04:00</td>\n",
       "      <td>a-h-S</td>\n",
       "      <td>POINT (-76.17212 36.99037)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>368528000</td>\n",
       "      <td>-75.877707</td>\n",
       "      <td>36.813708</td>\n",
       "      <td>4.7</td>\n",
       "      <td>91.9</td>\n",
       "      <td>2022-08-23 11:47:37-04:00</td>\n",
       "      <td>a-h-S</td>\n",
       "      <td>POINT (-75.87771 36.81371)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>368130840</td>\n",
       "      <td>-76.055923</td>\n",
       "      <td>36.979178</td>\n",
       "      <td>8.4</td>\n",
       "      <td>132</td>\n",
       "      <td>2022-08-23 11:47:37-04:00</td>\n",
       "      <td>a-h-S</td>\n",
       "      <td>POINT (-76.05592 36.97918)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>367606000</td>\n",
       "      <td>-76.152718</td>\n",
       "      <td>36.985448</td>\n",
       "      <td>10.8</td>\n",
       "      <td>108</td>\n",
       "      <td>2022-08-23 11:47:37-04:00</td>\n",
       "      <td>a-h-S</td>\n",
       "      <td>POINT (-76.15272 36.98545)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>565778000</td>\n",
       "      <td>-76.042933</td>\n",
       "      <td>37.012335</td>\n",
       "      <td>11.8</td>\n",
       "      <td>150.5</td>\n",
       "      <td>2022-08-23 11:52:39-04:00</td>\n",
       "      <td>a-h-S</td>\n",
       "      <td>POINT (-76.04293 37.01234)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>96 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         mmsi       long        lat speed course                       dtg  \\\n",
       "0   367371890 -75.889685  36.970760   9.8   91.4 2022-08-23 10:37:11-04:00   \n",
       "1   367772272 -76.046782  36.980807   0.9  124.5 2022-08-23 10:37:11-04:00   \n",
       "2   367007160 -76.156570  36.962037   3.5  250.1 2022-08-23 10:37:11-04:00   \n",
       "3   367525000 -76.085750  36.968973   1.5  175.3 2022-08-23 10:37:11-04:00   \n",
       "4   368180820 -76.116905  36.964137     0  240.8 2022-08-23 10:42:13-04:00   \n",
       "..        ...        ...        ...   ...    ...                       ...   \n",
       "91  367606000 -76.172120  36.990372  12.8  105.6 2022-08-23 11:42:35-04:00   \n",
       "92  368528000 -75.877707  36.813708   4.7   91.9 2022-08-23 11:47:37-04:00   \n",
       "93  368130840 -76.055923  36.979178   8.4    132 2022-08-23 11:47:37-04:00   \n",
       "94  367606000 -76.152718  36.985448  10.8    108 2022-08-23 11:47:37-04:00   \n",
       "95  565778000 -76.042933  37.012335  11.8  150.5 2022-08-23 11:52:39-04:00   \n",
       "\n",
       "   catcodes                    geometry  \n",
       "0     a-h-S  POINT (-75.88969 36.97076)  \n",
       "1     a-h-S  POINT (-76.04678 36.98081)  \n",
       "2     a-h-S  POINT (-76.15657 36.96204)  \n",
       "3     a-h-S  POINT (-76.08575 36.96897)  \n",
       "4     a-h-S  POINT (-76.11691 36.96414)  \n",
       "..      ...                         ...  \n",
       "91    a-h-S  POINT (-76.17212 36.99037)  \n",
       "92    a-h-S  POINT (-75.87771 36.81371)  \n",
       "93    a-h-S  POINT (-76.05592 36.97918)  \n",
       "94    a-h-S  POINT (-76.15272 36.98545)  \n",
       "95    a-h-S  POINT (-76.04293 37.01234)  \n",
       "\n",
       "[96 rows x 8 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "976e9118",
   "metadata": {},
   "outputs": [],
   "source": [
    "# process connection string\n",
    "password = \"$tr@ng3pl@n3t!\"\n",
    "con_string = \"postgresql://postgres:\"+quote(password)+\"@35.238.122.194:5432/SCOUT\"\n",
    "\n",
    "engine = create_engine(con_string)\n",
    "\n",
    "gdf.to_postgis(\"ais_history\", engine, if_exists=[\"fail\", \"replace\", \"append\"][2])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
